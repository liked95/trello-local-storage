{"ast":null,"code":"import { ADD_CARD, ADD_LIST, DELETE_LIST } from \"./constants\";\nexport const initialListState = {\n  listOrder: [],\n  lists: [{\n    id: 'list-1',\n    title: \"My title 1\",\n    cardOrder: ['card-1', 'card-2', 'card-3'],\n    cards: [{\n      id: 'card-1',\n      listId: 'list-1',\n      content: \"Lorem 1\"\n    }, {\n      id: 'card-2',\n      listId: 'list-1',\n      content: \"Lorem 2\"\n    }, {\n      id: 'card-3',\n      listId: 'list-1',\n      content: \"Lorem 3\"\n    }]\n  }, {\n    id: 'list-2',\n    title: \"My title 2\",\n    cardOrder: ['card-5', 'card-4', 'card-6'],\n    cards: [{\n      id: 'card-4',\n      listId: 'list-2',\n      content: \"Anonymous 4\"\n    }, {\n      id: 'card-5',\n      listId: 'list-2',\n      content: \"Anonymous 5\"\n    }, {\n      id: 'card-6',\n      listId: 'list-2',\n      content: \"Anonymous 6\"\n    }]\n  }]\n};\nconst listReducer = (state, action) => {\n  switch (action.type) {\n    case ADD_LIST:\n      return [...state, action.payload];\n    case DELETE_LIST:\n      return state.filter(list => list.id != action.payload);\n    case ADD_CARD:\n      console.log(action.payload);\n      const {\n        id,\n        content,\n        listId\n      } = action.payload;\n      return state.map(list => {\n        if (list.id != listId) return list;\n        // if listId is match, push newCard to list.cards\n        list.cards = [...list.cards, {\n          id,\n          content\n        }];\n        return {\n          ...list,\n          cards: list.cards\n        };\n      });\n    default:\n      return state;\n  }\n};\nexport default listReducer;","map":{"version":3,"names":["ADD_CARD","ADD_LIST","DELETE_LIST","initialListState","listOrder","lists","id","title","cardOrder","cards","listId","content","listReducer","state","action","type","payload","filter","list","console","log","map"],"sources":["D:/trello/src/store/reducer.js"],"sourcesContent":["import { ADD_CARD, ADD_LIST, DELETE_LIST } from \"./constants\"\r\n\r\nexport const initialListState = {\r\n    listOrder: [],\r\n    lists: [\r\n        {\r\n            id: 'list-1',\r\n            title: \"My title 1\",\r\n            cardOrder: ['card-1', 'card-2', 'card-3'],\r\n            cards: [\r\n                {\r\n                    id: 'card-1',\r\n                    listId: 'list-1',\r\n                    content: \"Lorem 1\",\r\n                },\r\n                {\r\n                    id: 'card-2',\r\n                    listId: 'list-1',\r\n                    content: \"Lorem 2\",\r\n                },\r\n                {\r\n                    id: 'card-3',\r\n                    listId: 'list-1',\r\n                    content: \"Lorem 3\",\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            id: 'list-2',\r\n            title: \"My title 2\",\r\n            cardOrder: ['card-5', 'card-4', 'card-6'],\r\n            cards: [\r\n                {\r\n                    id: 'card-4',\r\n                    listId: 'list-2',\r\n                    content: \"Anonymous 4\",\r\n                },\r\n                {\r\n                    id: 'card-5',\r\n                    listId: 'list-2',\r\n                    content: \"Anonymous 5\",\r\n                },\r\n                {\r\n                    id: 'card-6',\r\n                    listId: 'list-2',\r\n                    content: \"Anonymous 6\",\r\n                },\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nconst listReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ADD_LIST:\r\n            return [...state, action.payload]\r\n\r\n        case DELETE_LIST:\r\n            return state.filter(list => list.id != action.payload)\r\n\r\n        case ADD_CARD:\r\n            console.log(action.payload)\r\n            const { id, content, listId } = action.payload\r\n\r\n            return state.map(list => {\r\n                if (list.id != listId) return list\r\n                // if listId is match, push newCard to list.cards\r\n                list.cards = [...list.cards, { id, content }]\r\n                return { ...list, cards: list.cards }\r\n            })\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default listReducer \r\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,aAAa;AAE7D,OAAO,MAAMC,gBAAgB,GAAG;EAC5BC,SAAS,EAAE,EAAE;EACbC,KAAK,EAAE,CACH;IACIC,EAAE,EAAE,QAAQ;IACZC,KAAK,EAAE,YAAY;IACnBC,SAAS,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;IACzCC,KAAK,EAAE,CACH;MACIH,EAAE,EAAE,QAAQ;MACZI,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;IACb,CAAC,EACD;MACIL,EAAE,EAAE,QAAQ;MACZI,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;IACb,CAAC,EACD;MACIL,EAAE,EAAE,QAAQ;MACZI,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;IACb,CAAC;EAET,CAAC,EACD;IACIL,EAAE,EAAE,QAAQ;IACZC,KAAK,EAAE,YAAY;IACnBC,SAAS,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;IACzCC,KAAK,EAAE,CACH;MACIH,EAAE,EAAE,QAAQ;MACZI,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;IACb,CAAC,EACD;MACIL,EAAE,EAAE,QAAQ;MACZI,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;IACb,CAAC,EACD;MACIL,EAAE,EAAE,QAAQ;MACZI,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;IACb,CAAC;EAET,CAAC;AAET,CAAC;AAED,MAAMC,WAAW,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACnC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKd,QAAQ;MACT,OAAO,CAAC,GAAGY,KAAK,EAAEC,MAAM,CAACE,OAAO,CAAC;IAErC,KAAKd,WAAW;MACZ,OAAOW,KAAK,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACZ,EAAE,IAAIQ,MAAM,CAACE,OAAO,CAAC;IAE1D,KAAKhB,QAAQ;MACTmB,OAAO,CAACC,GAAG,CAACN,MAAM,CAACE,OAAO,CAAC;MAC3B,MAAM;QAAEV,EAAE;QAAEK,OAAO;QAAED;MAAO,CAAC,GAAGI,MAAM,CAACE,OAAO;MAE9C,OAAOH,KAAK,CAACQ,GAAG,CAACH,IAAI,IAAI;QACrB,IAAIA,IAAI,CAACZ,EAAE,IAAII,MAAM,EAAE,OAAOQ,IAAI;QAClC;QACAA,IAAI,CAACT,KAAK,GAAG,CAAC,GAAGS,IAAI,CAACT,KAAK,EAAE;UAAEH,EAAE;UAAEK;QAAQ,CAAC,CAAC;QAC7C,OAAO;UAAE,GAAGO,IAAI;UAAET,KAAK,EAAES,IAAI,CAACT;QAAM,CAAC;MACzC,CAAC,CAAC;IAEN;MACI,OAAOI,KAAK;EAAA;AAExB,CAAC;AAID,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}