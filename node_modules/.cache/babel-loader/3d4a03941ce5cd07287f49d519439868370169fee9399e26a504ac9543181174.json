{"ast":null,"code":"import { ADD_CARD, ADD_LIST, DELETE_LIST, UPDATE_LIST_ORDER, UPDATE_CARDS_BETWEEN_LISTS, UPDATE_DROP_HEADING, UPDATE_EMPTY_LIST } from \"./constants\";\nimport _ from 'lodash';\nimport { deleteFromArr, saveToLocal } from \"../utils\";\nexport const initialListState = {\n  listOrder: ['list-1', 'list-2', 'list-3'],\n  lists: [{\n    id: 'list-1',\n    title: \"My title 1\",\n    cardOrder: ['card-2', 'card-1', 'card-3'],\n    cards: [{\n      id: 'card-1',\n      listId: 'list-1',\n      content: \"First 1\"\n    }, {\n      id: 'card-2',\n      listId: 'list-1',\n      content: \"First 2\"\n    }, {\n      id: 'card-3',\n      listId: 'list-1',\n      content: \"First 3\"\n    }]\n  }, {\n    id: 'list-2',\n    title: \"My title 2\",\n    cardOrder: ['card-5', 'card-4', 'card-6'],\n    cards: [{\n      id: 'card-4',\n      listId: 'list-2',\n      content: \"Second 4\"\n    }, {\n      id: 'card-5',\n      listId: 'list-2',\n      content: \"Second 5\"\n    }, {\n      id: 'card-6',\n      listId: 'list-2',\n      content: \"Second 6\"\n    }]\n  }, {\n    id: 'list-3',\n    title: \"My title 3\",\n    cardOrder: ['card-8', 'card-7', 'card-9', 'card-10', 'card-11'],\n    cards: [{\n      id: 'card-7',\n      listId: 'list-3',\n      content: \"Third 7\"\n    }, {\n      id: 'card-8',\n      listId: 'list-3',\n      content: \"Third 8\"\n    }, {\n      id: 'card-9',\n      listId: 'list-3',\n      content: \"Third 9\"\n    }, {\n      id: 'card-10',\n      listId: 'list-3',\n      content: \"Third 10\"\n    }, {\n      id: 'card-11',\n      listId: 'list-3',\n      content: \"Third 11\"\n    }]\n  }]\n};\nconst listReducer = (state, action) => {\n  let clonedState = _.cloneDeep(state);\n  switch (action.type) {\n    case ADD_LIST:\n      {\n        const listOrder = [...clonedState.listOrder, action.payload.id];\n        const lists = _.cloneDeep(clonedState.lists);\n        lists.push({\n          id: action.payload.id,\n          title: action.payload.title,\n          cards: action.payload.cards,\n          cardOrder: action.payload.cardOrder\n        });\n        saveToLocal(\"data\", {\n          ...clonedState,\n          listOrder,\n          lists\n        });\n        return {\n          ...clonedState,\n          listOrder,\n          lists\n        };\n      }\n    case DELETE_LIST:\n      {\n        let listId = action.payload;\n        console.log(listId);\n        let listOrderIdx = clonedState.listOrder.indexOf(listId);\n        clonedState.listOrder.splice(listOrderIdx, 1);\n        let listIdx = clonedState.lists.findIndex(list => list.id == listId);\n        clonedState.lists.splice(listIdx, 1);\n        const newState = {\n          ...clonedState,\n          listOrder: clonedState.listOrder,\n          lists: clonedState.lists\n        };\n        console.log(newState);\n        saveToLocal(\"data\", newState);\n        return newState;\n      }\n    case ADD_CARD:\n      {\n        console.log(action.payload);\n        const {\n          listId,\n          id,\n          content\n        } = action.payload;\n        const lists = _.cloneDeep(clonedState.lists);\n        lists.map(list => {\n          if (list.id !== listId) {\n            return list;\n          }\n\n          // if listId is matched\n          list.cards.push({\n            id,\n            listId,\n            content\n          });\n          list.cardOrder.push(id);\n          return list;\n        });\n        console.log(lists);\n        saveToLocal(\"data\", {\n          ...clonedState,\n          lists\n        });\n        return {\n          ...clonedState,\n          lists\n        };\n      }\n    case UPDATE_LIST_ORDER:\n      {\n        // console.log(action.payload)\n        let newState = {\n          ...clonedState,\n          listOrder: action.payload\n        };\n        saveToLocal(\"data\", newState);\n        return newState;\n      }\n    case UPDATE_CARDS_BETWEEN_LISTS:\n      {\n        const {\n          dragListId,\n          dragCardId,\n          dropListId,\n          dropCardId\n        } = action.payload;\n        // console.log(dragListId, dragCardId, dropListId, dropCardId)\n        const lists = clonedState.lists;\n        const dragList = lists.find(list => list.id == dragListId);\n        // Remove dragCardId from cardOrder \n        deleteFromArr(dragCardId, dragList.cardOrder);\n        // Remove Card from DragList\n        let dragCardIdx = dragList.cards.findIndex(card => card.id == dragCardId);\n        let removedCard = dragList.cards.splice(dragCardIdx, 1)[0];\n        // console.log(removedCard, dragList)\n\n        // insert into dropListCardOrder\n        const dropList = lists.find(list => list.id == dropListId);\n        const dropCardOrderIdx = dropList.cardOrder.indexOf(dropCardId);\n        dropList.cardOrder.splice(dropCardOrderIdx + 1, 0, dragCardId);\n\n        // Insert removedCard into DropList\n        removedCard.listId = dropListId;\n        const dropCardIdx = dropList.cards;\n        dropList.cards.splice(dropCardIdx + 1, 0, removedCard);\n\n        // console.log(dropList)\n\n        let newState = {\n          ...clonedState,\n          lists\n        };\n        saveToLocal(\"data\", newState);\n        return newState;\n      }\n    case UPDATE_DROP_HEADING:\n      {\n        console.log(action.payload);\n        const {\n          dropListId,\n          dragCardId,\n          dragListId\n        } = action.payload;\n        const lists = clonedState.lists;\n        const dragList = lists.find(list => list.id == dragListId);\n        // Remove dragCardId from cardOrder \n        deleteFromArr(dragCardId, dragList.cardOrder);\n        // Remove Card from DragList\n        let dragCardIdx = dragList.cards.findIndex(card => card.id == dragCardId);\n        let removedCard = dragList.cards.splice(dragCardIdx, 1)[0];\n\n        // insert into dropListCardOrder\n        const dropList = lists.find(list => list.id == dropListId);\n        dropList.cardOrder.unshift(dragCardId);\n\n        // Insert removedCard into DropList\n        removedCard.listId = dropListId;\n        dropList.cards.unshift(removedCard);\n        let newState = {\n          ...clonedState,\n          lists\n        };\n        saveToLocal(\"data\", newState);\n        return newState;\n      }\n    case UPDATE_EMPTY_LIST:\n      {\n        const {\n          dropListId,\n          dragCardId,\n          dragListId\n        } = action.payload;\n        const lists = clonedState.lists;\n        const dragList = lists.find(list => list.id == dragListId);\n        // Remove dragCardId from cardOrder \n        deleteFromArr(dragCardId, dragList.cardOrder);\n        // Remove Card from DragList\n        let dragCardIdx = dragList.cards.findIndex(card => card.id == dragCardId);\n        let removedCard = dragList.cards.splice(dragCardIdx, 1)[0];\n\n        // insert into dropListCardOrder\n        const dropList = lists.find(list => list.id == dropListId);\n        dropList.cardOrder.unshift(dragCardId);\n\n        // Insert removedCard into DropList\n        removedCard.listId = dropListId;\n        removedCard.listId = dropListId;\n        dropList.cards.unshift(removedCard);\n        let newState = {\n          ...clonedState,\n          lists\n        };\n        saveToLocal(\"data\", newState);\n        return newState;\n      }\n    default:\n      return state;\n  }\n};\nexport default listReducer;","map":{"version":3,"names":["ADD_CARD","ADD_LIST","DELETE_LIST","UPDATE_LIST_ORDER","UPDATE_CARDS_BETWEEN_LISTS","UPDATE_DROP_HEADING","UPDATE_EMPTY_LIST","_","deleteFromArr","saveToLocal","initialListState","listOrder","lists","id","title","cardOrder","cards","listId","content","listReducer","state","action","clonedState","cloneDeep","type","payload","push","console","log","listOrderIdx","indexOf","splice","listIdx","findIndex","list","newState","map","dragListId","dragCardId","dropListId","dropCardId","dragList","find","dragCardIdx","card","removedCard","dropList","dropCardOrderIdx","dropCardIdx","unshift"],"sources":["D:/trello/src/store/reducer.js"],"sourcesContent":["import { ADD_CARD, ADD_LIST, DELETE_LIST, UPDATE_LIST_ORDER, UPDATE_CARDS_BETWEEN_LISTS, UPDATE_DROP_HEADING, UPDATE_EMPTY_LIST } from \"./constants\"\r\nimport _ from 'lodash'\r\nimport { deleteFromArr, saveToLocal } from \"../utils\"\r\n\r\nexport const initialListState = {\r\n    listOrder: ['list-1', 'list-2', 'list-3'],\r\n    lists: [\r\n        {\r\n            id: 'list-1',\r\n            title: \"My title 1\",\r\n            cardOrder: ['card-2', 'card-1', 'card-3'],\r\n            cards: [\r\n                {\r\n                    id: 'card-1',\r\n                    listId: 'list-1',\r\n                    content: \"First 1\",\r\n                },\r\n                {\r\n                    id: 'card-2',\r\n                    listId: 'list-1',\r\n                    content: \"First 2\",\r\n                },\r\n                {\r\n                    id: 'card-3',\r\n                    listId: 'list-1',\r\n                    content: \"First 3\",\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            id: 'list-2',\r\n            title: \"My title 2\",\r\n            cardOrder: ['card-5', 'card-4', 'card-6'],\r\n            cards: [\r\n                {\r\n                    id: 'card-4',\r\n                    listId: 'list-2',\r\n                    content: \"Second 4\",\r\n                },\r\n                {\r\n                    id: 'card-5',\r\n                    listId: 'list-2',\r\n                    content: \"Second 5\",\r\n                },\r\n                {\r\n                    id: 'card-6',\r\n                    listId: 'list-2',\r\n                    content: \"Second 6\",\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            id: 'list-3',\r\n            title: \"My title 3\",\r\n            cardOrder: ['card-8', 'card-7', 'card-9', 'card-10', 'card-11'],\r\n            cards: [\r\n                {\r\n                    id: 'card-7',\r\n                    listId: 'list-3',\r\n                    content: \"Third 7\",\r\n                },\r\n                {\r\n                    id: 'card-8',\r\n                    listId: 'list-3',\r\n                    content: \"Third 8\",\r\n                },\r\n                {\r\n                    id: 'card-9',\r\n                    listId: 'list-3',\r\n                    content: \"Third 9\",\r\n                },\r\n                {\r\n                    id: 'card-10',\r\n                    listId: 'list-3',\r\n                    content: \"Third 10\",\r\n                },\r\n                {\r\n                    id: 'card-11',\r\n                    listId: 'list-3',\r\n                    content: \"Third 11\",\r\n                },\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nconst listReducer = (state, action) => {\r\n    let clonedState = _.cloneDeep(state)\r\n    switch (action.type) {\r\n        case ADD_LIST: {\r\n            const listOrder = [...clonedState.listOrder, action.payload.id]\r\n            const lists = _.cloneDeep(clonedState.lists)\r\n            lists.push({\r\n                id: action.payload.id,\r\n                title: action.payload.title,\r\n                cards: action.payload.cards,\r\n                cardOrder: action.payload.cardOrder,\r\n\r\n            })\r\n\r\n\r\n            saveToLocal(\"data\", { ...clonedState, listOrder, lists })\r\n            return { ...clonedState, listOrder, lists }\r\n        }\r\n\r\n        case DELETE_LIST: {\r\n            let listId = action.payload\r\n            console.log(listId)\r\n\r\n            let listOrderIdx = clonedState.listOrder.indexOf(listId)\r\n            clonedState.listOrder.splice(listOrderIdx, 1)\r\n\r\n            let listIdx = clonedState.lists.findIndex(list => list.id == listId)\r\n            clonedState.lists.splice(listIdx, 1)\r\n\r\n            const newState = {\r\n                ...clonedState,\r\n                listOrder: clonedState.listOrder,\r\n                lists: clonedState.lists\r\n            }\r\n\r\n            console.log(newState)\r\n            saveToLocal(\"data\", newState)\r\n            return newState\r\n        }\r\n\r\n        case ADD_CARD: {\r\n            console.log(action.payload)\r\n            const { listId, id, content } = action.payload\r\n            const lists = _.cloneDeep(clonedState.lists)\r\n\r\n            lists.map(list => {\r\n                if (list.id !== listId) {\r\n                    return list\r\n                }\r\n\r\n                // if listId is matched\r\n                list.cards.push({\r\n                    id,\r\n                    listId,\r\n                    content,\r\n                })\r\n\r\n                list.cardOrder.push(id)\r\n                return list\r\n            })\r\n\r\n            console.log(lists)\r\n\r\n            saveToLocal(\"data\", { ...clonedState, lists })\r\n            return { ...clonedState, lists }\r\n        }\r\n\r\n        case UPDATE_LIST_ORDER: {\r\n            // console.log(action.payload)\r\n            let newState = { ...clonedState, listOrder: action.payload }\r\n\r\n            saveToLocal(\"data\", newState)\r\n\r\n            return newState\r\n        }\r\n\r\n        case UPDATE_CARDS_BETWEEN_LISTS: {\r\n\r\n            const { dragListId, dragCardId, dropListId, dropCardId } = action.payload\r\n            // console.log(dragListId, dragCardId, dropListId, dropCardId)\r\n            const lists = clonedState.lists\r\n            const dragList = lists.find(list => list.id == dragListId)\r\n            // Remove dragCardId from cardOrder \r\n            deleteFromArr(dragCardId, dragList.cardOrder)\r\n            // Remove Card from DragList\r\n            let dragCardIdx = dragList.cards.findIndex(card => card.id == dragCardId)\r\n            let removedCard = dragList.cards.splice(dragCardIdx, 1)[0]\r\n            // console.log(removedCard, dragList)\r\n\r\n            // insert into dropListCardOrder\r\n            const dropList = lists.find(list => list.id == dropListId)\r\n            const dropCardOrderIdx = dropList.cardOrder.indexOf(dropCardId)\r\n            dropList.cardOrder.splice(dropCardOrderIdx + 1, 0, dragCardId)\r\n\r\n            // Insert removedCard into DropList\r\n            removedCard.listId = dropListId\r\n            const dropCardIdx = dropList.cards\r\n            dropList.cards.splice(dropCardIdx + 1, 0, removedCard)\r\n\r\n\r\n            // console.log(dropList)\r\n\r\n            let newState = { ...clonedState, lists }\r\n\r\n\r\n            saveToLocal(\"data\", newState)\r\n\r\n            return newState\r\n        }\r\n\r\n        case UPDATE_DROP_HEADING: {\r\n            console.log(action.payload)\r\n            const { dropListId, dragCardId, dragListId } = action.payload\r\n\r\n            const lists = clonedState.lists\r\n            const dragList = lists.find(list => list.id == dragListId)\r\n            // Remove dragCardId from cardOrder \r\n            deleteFromArr(dragCardId, dragList.cardOrder)\r\n            // Remove Card from DragList\r\n            let dragCardIdx = dragList.cards.findIndex(card => card.id == dragCardId)\r\n            let removedCard = dragList.cards.splice(dragCardIdx, 1)[0]\r\n\r\n\r\n            // insert into dropListCardOrder\r\n            const dropList = lists.find(list => list.id == dropListId)\r\n            dropList.cardOrder.unshift(dragCardId)\r\n\r\n            // Insert removedCard into DropList\r\n            removedCard.listId = dropListId \r\n            dropList.cards.unshift(removedCard)\r\n\r\n            let newState = {...clonedState, lists}\r\n            saveToLocal(\"data\", newState)\r\n            return newState\r\n        }\r\n\r\n\r\n        case UPDATE_EMPTY_LIST: {\r\n            const { dropListId, dragCardId, dragListId } = action.payload\r\n            const lists = clonedState.lists\r\n            const dragList = lists.find(list => list.id == dragListId)\r\n            // Remove dragCardId from cardOrder \r\n            deleteFromArr(dragCardId, dragList.cardOrder)\r\n            // Remove Card from DragList\r\n            let dragCardIdx = dragList.cards.findIndex(card => card.id == dragCardId)\r\n            let removedCard = dragList.cards.splice(dragCardIdx, 1)[0]\r\n\r\n\r\n            // insert into dropListCardOrder\r\n            const dropList = lists.find(list => list.id == dropListId)\r\n            dropList.cardOrder.unshift(dragCardId)\r\n\r\n            // Insert removedCard into DropList\r\n            removedCard.listId = dropListId\r\n            removedCard.listId = dropListId\r\n            dropList.cards.unshift(removedCard)\r\n\r\n            let newState = {...clonedState, lists}\r\n            saveToLocal(\"data\", newState)\r\n\r\n            return newState\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default listReducer \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}